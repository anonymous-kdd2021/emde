import subprocess
import os
import numpy as np

"""
Utils for creating upstream represenation of user-product interaction data.
"""

def train_cleora(dim, iter_, columns, input_filename, output_filename, force=True):
    """
    Embeds entities in n-dimensional spherical spaces utilizing extremely fast stable, iterative random projections,
    which allows for unparalleled performance and scalability.
    It uses cleora-light - a general-purpose model for efficient, scalable learning of stable and inductive entity embeddings for heterogeneous relational data.
    :param int iter_: number of cleora iteration
    :params str columns: columns in file
    :param str input_filename input filename to cleora
    :param str output_filename: output filename from cleora
    :param bool force: if False, we don't train cleora if `output_filename` already exist
    """
    if not os.path.exists(output_filename) or force:
        command = ['./cleora-light',
                        '--columns', columns,
                        '--dimension', str(dim),
                        '-n', str(iter_),
                        '--input', input_filename,
                        '--output', output_filename]
        subprocess.run(command)


def get_embeddings_from_file(filename, all_items):
    """
    Read embeddings from file generated by cleora-light.
    Structure of input file:
    {num_entities} {embedding_dimension}
    {entity_id} {entity_occurrence_count} {embedding}
    {entity_id} {entity_occurrence_count} {embedding}
    {entity_id} {entity_occurrence_count} {embedding}
    ...

    :param str filename:  filename with embeddings generated by cleora
    :param set all_items: all item ids, if no embedding for some ids, we add random embeddings for missing items.
    """
    print(f'Getting embeddings from file: {filename}')
    productid2retailerpartno = {}
    products_emb = []
    all_items_so_far = []
    with open(filename, 'r') as f:
        emb_dim = int(next(f).split()[1])
        for line_idx, line in enumerate(f):
            line_splitted = line.split()
            product_current = str(line_splitted[0])
            productid2retailerpartno[line_idx] = product_current
            products_emb.append(np.array([float(i) for i in line_splitted[2:]]))
            all_items_so_far.append(product_current)

        product_idx = line_idx + 1
        for item in all_items:
            if not str(item) in all_items_so_far:
                productid2retailerpartno[product_idx] = str(item)
                products_emb.append(np.random.normal(0, 0.1, (emb_dim,)))
                product_idx += 1
        products_emb = np.array(products_emb)
    return products_emb, productid2retailerpartno
